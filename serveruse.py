from flask import Flask, request, render_template_string, send_file
import threading
import csv
import os
import io
import time
import socket
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import pickle
import numpy as np

app = Flask(__name__)

current = {"active": False}  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î
history_rows = []  # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ)
latest_values = {}  # ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å UDP ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢

udp_status = {"active": False}
last_udp_time = 0

model = None  # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢

# ‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡πÄ‡∏Å‡πá‡∏ö history RSSI ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
history = {
    'tx1': [],
    'tx2': [],
    'tx3': [],
    'tx4': [],
    'wifi1': [],
    'wifi2': [],
    'wifi3': [],
    'wifi4': [],
    'wifi5': [],
    'wifi6': [],
}

MAX_HISTORY_LEN = 50  # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 50 ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î


# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
def load_model():
    global model
    model_path = os.path.join("model", "model11.pkl")
    if os.path.exists(model_path):
        with open(model_path, "rb") as f:
            model = pickle.load(f)
        print("‚úÖ Loaded ML model from model11.pkl")
    else:
        print("‚ùå Model file not found:", model_path)


# UDP Server Thread ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def udp_server():
    global last_udp_time, latest_values, udp_status, history
    UDP_IP = "0.0.0.0"
    UDP_PORT = 2500
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        sock.bind((UDP_IP, UDP_PORT))
    except OSError:
        print(f"‚ùå Port {UDP_PORT} already in use!")
        return
    print(f"üì° Listening on UDP port {UDP_PORT}")

    data_row = {f"tx{i}": None for i in range(1, 5)}
    data_row.update({f"wifi{i}": 0.0 for i in range(1, 7)})

    while True:
        sock.settimeout(1.0)
        try:
            data, _ = sock.recvfrom(1024)
            msg = data.decode().strip()
            udp_status["active"] = True
            last_udp_time = time.time()
            # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "tx1: -45"
            if ":" in msg:
                label, val = [x.strip().lower() for x in msg.split(":")]
                if label in data_row:
                    try:
                        data_row[label] = float(val)
                    except:
                        pass

            latest_values = data_row.copy()

            # ‡πÄ‡∏Å‡πá‡∏ö history ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å key
            for k in history.keys():
                v = data_row.get(k)
                if v is None:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö NaN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡∏≤‡∏î
                    v = np.nan
                history[k].append(v)
                if len(history[k]) > MAX_HISTORY_LEN:
                    history[k].pop(0)

        except socket.timeout:
            if time.time() - last_udp_time > 3:
                udp_status["active"] = False


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x,y ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•
def predict_position():
    global latest_values, model
    if model is None:
        return None, None

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• features ‡∏à‡∏≤‡∏Å latest_values ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    features = []
    keys_order = ['tx1', 'tx2', 'tx3', 'tx4', 'wifi1', 'wifi2', 'wifi3', 'wifi4', 'wifi5', 'wifi6']
    for k in keys_order:
        v = latest_values.get(k)
        if v is None:
            v = 0.0
        features.append(float(v))

    X = np.array(features).reshape(1, -1)
    pred = model.predict(X)
    # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (x,y) ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏ä‡πà‡∏ô [x,y]
    if len(pred.shape) == 2 and pred.shape[1] == 2:
        return int(pred[0][0]), int(pred[0][1])
    else:
        return None, None


# ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å
@app.route("/")
def index():
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</title>
        <style>
            body { font-family: Arial; background: #f0f0f0; padding: 20px; }
            .container { background: white; padding: 20px; border-radius: 10px; max-width: 700px; margin: auto; box-shadow: 0 0 10px rgba(0,0,0,0.2); }
            h2 { color: #333; }
            button { font-size: 16px; padding: 10px 20px; margin-top: 10px; border: none; border-radius: 5px; cursor: pointer; }
            .start { background: #28a745; color: white; }
            .stop { background: #dc3545; color: white; }
            img { max-width: 100%; border: 1px solid #ccc; margin-top: 20px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h2>üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•</h2>

            <form action="/toggle" method="post">
                <button class="{{ 'stop' if active else 'start' }}">
                    {{ '‚èπ ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á' if active else '‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á' }}
                </button>
            </form>

            <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ UDP: <strong style="color: {{ 'green' if udp_active else 'red' }}">{{ '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' if udp_active else '‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...' }}</strong></p>

            <img src="/plot" alt="‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà" id="mapimg">

            <h2>üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ RSSI (tx1-4, wifi1-6)</h2>
            <img src="/lineplot" alt="‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô RSSI" style="width:100%; max-width:700px; border:1px solid #ccc;">

        </div>

        <script>
          function reloadMap() {
            const img = document.getElementById('mapimg');
            img.src = '/plot?' + new Date().getTime();
          }

          {% if active %}
          setInterval(reloadMap, 2000);
          {% endif %}
        </script>
    </body>
    </html>
    """
    return render_template_string(html,
                                  active=current["active"],
                                  udp_active=udp_status["active"])


# ‡∏õ‡∏∏‡πà‡∏° toggle start/stop ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î
@app.route("/toggle", methods=["POST"])
def toggle():
    current["active"] = not current["active"]
    return index()


# ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏£‡∏π‡∏õ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∏‡∏î‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á)
@app.route("/plot")
def plot():
    img_path = os.path.join("map", "map.jpg")
    if not os.path.exists(img_path):
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà", 404

    img = plt.imread(img_path)
    fig, ax = plt.subplots(figsize=(8, 6))
    ax.imshow(img)

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞ plot ‡∏à‡∏∏‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    if current["active"]:
        x, y = predict_position()
        if x is not None and y is not None:
            ax.plot(x, y, 'ro', markersize=10, alpha=0.8)
            ax.text(x + 5, y, f"({x},{y})", color='red', fontsize=12)

    ax.axis('off')
    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return send_file(buf, mimetype='image/png')


# ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ RSSI ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
@app.route("/lineplot")
def lineplot():
    fig, ax = plt.subplots(figsize=(10, 5))

    colors = {
        'tx1': 'red',
        'tx2': 'blue',
        'tx3': 'green',
        'tx4': 'purple',
        'wifi1': 'orange',
        'wifi2': 'brown',
        'wifi3': 'pink',
        'wifi4': 'cyan',
        'wifi5': 'magenta',
        'wifi6': 'gray',
    }

    plotted_any = False
    for key, vals in history.items():
        if vals:
            ax.plot(vals, label=key, color=colors.get(key, None))
            plotted_any = True

    ax.set_ylim(-100, 0)  # RSSI ‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ (dBm)
    ax.set_title("RSSI History for tx1-4 and wifi1-6")
    ax.set_xlabel("Time (latest to oldest)")
    ax.set_ylabel("RSSI (dBm)")
    ax.legend()
    ax.grid(True)

    if not plotted_any:
        ax.text(0.5, 0.5, "No data yet", ha='center', va='center', fontsize=14)
        ax.axis('off')

    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return send_file(buf, mimetype='image/png')


if __name__ == "__main__":
    os.makedirs("model", exist_ok=True)
    os.makedirs("map", exist_ok=True)

    load_model()

    threading.Thread(target=udp_server, daemon=True).start()

    app.run(host="0.0.0.0", port=1000)
