#include <heltec_unofficial.h>
#include <WiFi.h>
#include <WiFiUdp.h>
#include <map>
#include <set>  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö BSSID ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥

// üîß LoRa config
#define BANDWIDTH        0
#define SPREADING_FACTOR 9

// üåÄ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ó‡∏µ‡πà RX ‡∏à‡∏∞‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≠‡∏ö
const float freqs[] = {915.0, 915.5, 916.0, 916.5};
int currentFreqIndex = 0;
unsigned long lastHopTime = 0;
unsigned long hopInterval = 500;  // ms

// üåê UDP config
WiFiUDP udp;
const char* udp_host = "172.20.2.103";
const int udp_port = 2500;

// üì° WiFi BSSID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô RSSI
std::map<String, String> fixedWiFiLabels = {
  {"9C:8C:D8:05:25:C0", "WiFi1"},
  {"9C:8C:D8:03:B2:A0", "WiFi2"},
  {"90:4C:81:42:00:E0", "WiFi3"},
  {"E8:26:89:B1:99:20", "WiFi4"},
  {"E8:26:89:B0:BC:80", "WiFi5"},
  {"9C:8C:D8:02:F6:60", "WiFi6"}
};
static int dynamicWiFiCount = 7;  // ‡πÄ‡∏£‡∏¥‡πà‡∏° WiFi7 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BSSID ‡πÉ‡∏´‡∏°‡πà

std::set<String> seenBSSIDs;  // ‡πÄ‡∏Å‡πá‡∏ö BSSID ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠
int totalKnownWiFi = 6;       // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 6 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
int totalSeenWiFi = 0;        // BSSID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

void sendUDPMessage(const String& message) {
  udp.beginPacket(udp_host, udp_port);
  udp.println(message);
  udp.endPacket();
  both.println("üì§ UDP Sent: " + message);
}

void setup() {
  heltec_setup();
  both.println("üöÄ RX Real-time: Multi-Frequency LoRa + WiFi RSSI ‚Üí UDP");

  // ‚òëÔ∏è Init LoRa
  if (radio.begin() != RADIOLIB_ERR_NONE) {
    both.println("‚ùå LoRa init failed!");
    while (true);
  }

  radio.setBandwidth(BANDWIDTH);
  radio.setSpreadingFactor(SPREADING_FACTOR);
  radio.setFrequency(freqs[currentFreqIndex]);
  radio.startReceive();

  // ‚òëÔ∏è Init WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin("PNU@WiFi", "");  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

  both.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    both.print(".");
  }
  both.println(" ‚úÖ Connected!");

  udp.begin(WiFi.localIP(), udp_port);
}

void loop() {
  heltec_loop();

  // ‚úÖ ‡∏£‡∏±‡∏ö LoRa ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  String received;
  int status = radio.receive(received);
  if (status == RADIOLIB_ERR_NONE) {
    int rssi = radio.getRSSI();
    String message = received + ": " + String(rssi);
    sendUDPMessage(message);
    radio.startReceive();  // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ü‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà
  }

  // üîÅ ‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ó‡∏∏‡∏Å hopInterval ms
  if (millis() - lastHopTime > hopInterval) {
    currentFreqIndex = (currentFreqIndex + 1) % (sizeof(freqs) / sizeof(freqs[0]));
    radio.setFrequency(freqs[currentFreqIndex]);
    radio.startReceive();
    lastHopTime = millis();
    both.printf("üîÑ Switched to %.1f MHz\n", freqs[currentFreqIndex]);
  }

  // üì∂ ‡∏™‡πÅ‡∏Å‡∏ô WiFi BSSID ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à + ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö WiFi ‡πÉ‡∏´‡∏°‡πà + ‡πÅ‡∏™‡∏î‡∏á PNU@WiFi
  static unsigned long lastScanTime = 0;
  const unsigned long scanInterval = 2000;

  if (millis() - lastScanTime > scanInterval) {
    int n = WiFi.scanNetworks(false, true);
    for (int i = 0; i < n; ++i) {
      String bssid = WiFi.BSSIDstr(i);
      String ssid = WiFi.SSID(i);
      int rssi = WiFi.RSSI(i);

      // ‚ú® ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô BSSID ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ (‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
      if (!seenBSSIDs.count(bssid)) {
        seenBSSIDs.insert(bssid);
        totalSeenWiFi++;
        both.printf("üìä ‡∏û‡∏ö BSSID ‡πÉ‡∏´‡∏°‡πà #%d: %s\n", totalSeenWiFi, bssid.c_str());
      }

      // BSSID ‡∏ó‡∏µ‡πà‡∏°‡∏µ label ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      if (fixedWiFiLabels.count(bssid)) {
        String label = fixedWiFiLabels[bssid];
        String msg = label + ": " + String(rssi);
        sendUDPMessage(msg);
      }
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô BSSID ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ WiFi7, WiFi8, ...
      else {
        String label = "WiFi" + String(dynamicWiFiCount++);
        fixedWiFiLabels[bssid] = label;
        totalKnownWiFi++;
        String msg = label + ": " + String(rssi) + " (new)";
        sendUDPMessage(msg);
        both.printf("üì° ‡πÄ‡∏û‡∏¥‡πà‡∏° WiFi ‡πÉ‡∏´‡∏°‡πà: %s ‚Üí %s (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏ï‡∏±‡∏ß)\n", label.c_str(), bssid.c_str(), totalKnownWiFi);
      }

      // ‡πÅ‡∏™‡∏î‡∏á RSSI ‡∏Ç‡∏≠‡∏á SSID ‡∏ä‡∏∑‡πà‡∏≠ "PNU@WiFi"
      if (ssid == "PNU@WiFi") {
        String msg = "PNU@WiFi (scan): " + String(rssi);
        sendUDPMessage(msg);
      }
    }

    both.printf("üìà WiFi ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥): %d ‡∏ï‡∏±‡∏ß\n", totalSeenWiFi);
    lastScanTime = millis();
  }
}
